<div class="grid grid-cols-1 lg:grid-cols-2 gap-3 lg:h-[90vh]">
    <section class="hero-slider hero-style ml-3 lg:mr-0 mr-3 bg-white overflow-hidden rounded-2xl lg:h-full h-[400px] ">
        <div class="swiper-container product_detail">
            <div class="swiper-wrapper">
                <% for (let i=0; i < imagesProducts.length; i++) { %>
                    <div class="swiper-slide">
                        <div class="slide-inner slide-bg-image" data-background="<%- imagesProducts[i] %>">

                        </div>
                    </div>
                    <% } %>
            </div>
            <div class="swiper-pagination"></div>
            <div class="swiper-button-next"></div>
            <div class="swiper-button-prev"></div>
        </div>
    </section>
    <section class="mr-3 ml-3 card p-4">
        <h2 class="text-2xl font-semibold mb-3"><%- dataProductDetail.title %></h2>
        <p class="mb-4"><%- (dataProductDetail.description_long.replace(/<[^>]*>/g, '').trim() === '')
                ? dataProductDetail.description_short
                : dataProductDetail.description_long %>
        </p>

        <% if (GetInfo.type_store=="product" ) { %>
            <p class="mt-4 mb-4">
                <% if (dataProductDetail.price.sale && dataProductDetail.price.sale !==0 &&
                    dataProductDetail.price.regular !==dataProductDetail.price.sale) { %>

                    <%= dataProductDetail.price.tag %>
                        <span class="text-lg md:text-lg text-gray-400 line-through mr-1"><%-
                                GetInfo.catalogo.currency['symbol'] %>
                                <%= dataProductDetail.price.regular.toFixed(2) %></span>
                        <span class="text-2xl text-red-600 font-semibold"><%- GetInfo.catalogo.currency['symbol'] %>
                                <%= dataProductDetail.price.sale.toFixed(2) %></span>
                        <% } else { %>
                            <strong><%- GetInfo.catalogo.currency['symbol'] %></strong>
                            <span class="text-2xl text-blank-600 font-semibold">
                                <%= dataProductDetail.price.regular.toFixed(2) %>
                            </span>

                            <% } %>

            </p>

            <div>
                <div class="hidden">
                    <img id="product-image" src="" class="hidden" alt="Imagen del producto">
                </div>

                <div id="selectors"></div>
                <p id="price-info" style="text-align: center; min-height: 2em;">
                    <span id="price-regular-container">
                        <span id="price-regular"></span>
                    </span>
                    <span id="price-sale-container" style="display: none;">
                        <span id="price-sale"></span>
                    </span>
                </p>
                <div id="product-message" class="product-message"></div>
                <button id="add-to-cart-btn" disabled>Agregar al Carrito</button>
            </div>

            <div class="mt-3  mb-3">

                <div class="flex items-center ">

                    <button
                        class="bg-[var(--primary-color)] text-[#ffffff] border-r-0 rounded-l-full  w-[20%] border border-[var(--primary-color)] rounded px-3 py-1 focus:outline-none hover:bg-[var(--primary-color)]/90"
                        id="decrease">
                        -
                    </button>

                    <input type="number"
                        class="w-[60%] text-center border border-r-0 font-semibold  border-l-0 border-[var(--primary-color)]  py-1 focus:outline-none"
                        id="quantity" value="1" min="1" />

                    <button
                        class="bg-[var(--primary-color)]  w-[20%]  rounded-r-full border-l-0  text-[#ffffff]  border border-[var(--primary-color)] rounded px-3 py-1 focus:outline-none hover:bg-[var(--primary-color)]/90"
                        id="increase">
                        +
                    </button>

                </div>

            </div>
            <% } %>
                <div class="flex flex-col gap-3">
                    <% if (GetInfo.type_store=="product" ) { %>
                        <%- include('./btn_add_cart', { title: dataProductDetail.title, image:
                            dataProductDetail.image_default[0], id_product: dataProductDetail._id, price_regular:
                            dataProductDetail.price.regular.toFixed(2), price_sale:
                            dataProductDetail.price.sale.toFixed(2),slug:dataProductDetail.slug }) %>

                            <%- include('./btn_whatsapp_direct', { GetInfo: GetInfo, title: dataProductDetail.title,
                                slug: dataProductDetail.slug, price: dataProductDetail.price.regular.toFixed(2) }) %>

                                <% } else { %>

                                    <%- include('./btn_whatsapp_direct', { GetInfo: GetInfo, title:
                                        dataProductDetail.title, slug: dataProductDetail.slug, price:
                                        dataProductDetail.price.regular.toFixed(2) }) %>

                                        <% } %>
                </div>

    </section>
</div>
<% if (GetInfo.type_store=="product" ) { %>


    <script>

        const product = JSON.parse('<%- JSON.stringify(dataProductDetail) %>');

        console.log((JSON.stringify(product)).toJSON);

        const decreaseBtn = document.getElementById('decrease');
        const increaseBtn = document.getElementById('increase');
        const quantityInput = document.getElementById('quantity');

        decreaseBtn.addEventListener('click', () => {
            let currentValue = parseInt(quantityInput.value, 10);
            if (currentValue > 1) {
                quantityInput.value = currentValue - 1;
            }
        });

        increaseBtn.addEventListener('click', () => {
            let currentValue = parseInt(quantityInput.value, 10);
            quantityInput.value = currentValue + 1;
        });


        const CONFIG = {
            attributeDisplayType: 'buttons', // 'select' o 'buttons'
            currencySymbol: 'S/',
            defaultImage: 'https://placehold.co/600x400/E0E0E0/757575?text=Elige+Variación',
            defaultAltText: 'Selecciona una combinación de atributos para ver el producto.',
            defaultVariationSku: 'CTA-M-AZL-TECH', // Sku por defecto, o null
        };

        function renderProduct() {

            const DEFAULT_SELECT_OPTION_VALUE = "";

            const selectedAttributes = {};
            let currentValidVariation = null;

            const selectorsContainer = document.getElementById('selectors');

            const productImageEl = document.getElementById('product-image');
            const priceInfoEl = document.getElementById('price-info');
            const priceRegularContainer = document.getElementById('price-regular-container');
            const priceRegularEl = document.getElementById('price-regular');
            const priceSaleContainer = document.getElementById('price-sale-container');
            const priceSaleEl = document.getElementById('price-sale');
            const productMessageEl = document.getElementById('product-message'); // Renombrado desde noVariationMessageEl
            const addToCartBtn = document.getElementById('add-to-cart-btn');

            function getVariationAttributeText(productAttributesDef, variationAttributes) {
                return Object.entries(variationAttributes)
                    .map(([attrName, attrValue]) => {
                        const attrDef = productAttributesDef.find(def => def.name === attrName);
                        if (attrDef) {
                            const valueDef = attrDef.values.find(val => val.value === attrValue);
                            return valueDef ? valueDef.label : attrValue; // Solo mostrar label del valor
                        }
                        return attrValue;
                    })
                    .join(' / ');
            }

            function formatPrice(amount) {
                return `${CONFIG.currencySymbol}${amount.toFixed(2)}`;
            }

            function isOptionAvailable(attrNameToTest, attrValueToTest, otherSelectedAttributes) {
                const hypotheticalSelections = { ...otherSelectedAttributes, [attrNameToTest]: attrValueToTest };
                return product.variations.some(variation => {
                    const attrsMatch = Object.entries(hypotheticalSelections).every(
                        ([selectedKey, selectedValue]) => variation.attributes[selectedKey] === selectedValue
                    );
                    return attrsMatch && variation.stock > 0; // Considerar stock
                });
            }

            function renderAttributeSelectors() {
                selectorsContainer.innerHTML = '';
                const firstAttributeName = product.attributes.length > 0 ? product.attributes[0].name : null;

                product.attributes.forEach(attr => {
                    const groupContainer = document.createElement('div');
                    groupContainer.classList.add('attribute-group');
                    groupContainer.setAttribute('data-attr-group', attr.name);

                    const labelEl = document.createElement('label');
                    labelEl.textContent = `${attr.label}:`;
                    groupContainer.appendChild(labelEl);

                    const displayType = attr.type_label || 'label'; // Por defecto 'label'

                    if (CONFIG.attributeDisplayType === 'buttons') {
                        const buttonsContainer = document.createElement('div');
                        buttonsContainer.id = `attr-buttons-${attr.name}`;
                        buttonsContainer.classList.add('attribute-buttons-container');

                        attr.values.forEach(v => {
                            const buttonEl = document.createElement('button');
                            buttonEl.type = 'button';
                            buttonEl.dataset.attrName = attr.name;
                            buttonEl.dataset.attrValue = v.value;
                            buttonEl.setAttribute('aria-label', v.label); // Para accesibilidad
                            buttonEl.title = v.label; // Tooltip

                            switch (displayType) {
                                case 'hexa':
                                    buttonEl.classList.add('type-hexa');
                                    if (v.hexa) buttonEl.style.backgroundColor = v.hexa;
                                    // Para contraste de borde en colores oscuros/claros, se puede añadir lógica
                                    // o confiar en el borde de la clase .active
                                    break;
                                case 'image':
                                    buttonEl.classList.add('type-image');
                                    if (v.image) buttonEl.style.backgroundImage = `url('${v.image}')`;
                                    break;
                                case 'label':
                                default:
                                    buttonEl.classList.add('type-label');
                                    buttonEl.textContent = v.label;
                                    break;
                            }
                            buttonEl.addEventListener('click', handleAttributeButtonClick);
                            buttonsContainer.appendChild(buttonEl);
                        });
                        groupContainer.appendChild(buttonsContainer);
                    } else { // 'select'
                        labelEl.htmlFor = `select-${attr.name}`;
                        const selectEl = document.createElement('select');
                        selectEl.id = `select-${attr.name}`;
                        selectEl.dataset.attrName = attr.name;

                        const defaultOption = document.createElement('option');
                        defaultOption.value = DEFAULT_SELECT_OPTION_VALUE;
                        defaultOption.textContent = `— Selecciona ${attr.label.toLowerCase()} —`;
                        selectEl.appendChild(defaultOption);

                        attr.values.forEach(v => {
                            const option = document.createElement('option');
                            option.value = v.value;
                            option.textContent = v.label; // Select siempre muestra label
                            selectEl.appendChild(option);
                        });
                        selectEl.addEventListener('change', handleAttributeChangeForSelect);
                        groupContainer.appendChild(selectEl);
                    }
                    selectorsContainer.appendChild(groupContainer);
                });
            }

            function handleAttributeChangeForSelect(event) {
                const selectElement = event.target;
                const attributeName = selectElement.dataset.attrName;
                const selectedValue = selectElement.value;
                if (selectedValue && selectedValue !== DEFAULT_SELECT_OPTION_VALUE) {
                    selectedAttributes[attributeName] = selectedValue;
                } else {
                    delete selectedAttributes[attributeName];
                }
                processAttributeSelection();
            }

            function handleAttributeButtonClick(event) {
                const buttonElement = event.currentTarget; // Usar currentTarget por si hay hijos en el botón
                const attributeName = buttonElement.dataset.attrName;
                const selectedValue = buttonElement.dataset.attrValue;
                if (buttonElement.classList.contains('active')) {
                    delete selectedAttributes[attributeName];
                } else {
                    selectedAttributes[attributeName] = selectedValue;
                }
                processAttributeSelection();
            }

            function processAttributeSelection() {
                updateAttributeControlsUI();
                updateVariationDisplay();
            }

            addToCartBtn.addEventListener('click', () => {
                if (currentValidVariation && currentValidVariation.stock > 0) {
                    console.log('Agregado al carrito:', currentValidVariation);
                    alert(`'${product.title}' (SKU: ${currentValidVariation.sku}, ${getVariationAttributeText(product.attributes, currentValidVariation.attributes)}) agregado.`);
                }
            });

            function updateAttributeControlsUI() {
                const firstAttributeName = product.attributes.length > 0 ? product.attributes[0].name : null;

                product.attributes.forEach(attr => {
                    const currentSelectedValueForThisAttribute = selectedAttributes[attr.name];
                    const otherAttributeSelections = { ...selectedAttributes };
                    delete otherAttributeSelections[attr.name];
                    const isThisTheFirstAttributeGroup = attr.name === firstAttributeName;

                    if (CONFIG.attributeDisplayType === 'buttons') {
                        const buttonsInGroup = selectorsContainer.querySelectorAll(`.attribute-buttons-container button[data-attr-name="${attr.name}"]`);
                        buttonsInGroup.forEach(button => {
                            const buttonValue = button.dataset.attrValue;
                            const isActive = currentSelectedValueForThisAttribute === buttonValue;
                            button.classList.toggle('active', isActive);

                            let isEnabled = true;
                            if (isThisTheFirstAttributeGroup) {
                                isEnabled = true; // Opciones del primer atributo siempre habilitadas
                            } else {
                                if (isActive) isEnabled = true; // Opción activa siempre habilitada para deseleccionar
                                else isEnabled = isOptionAvailable(attr.name, buttonValue, otherAttributeSelections);
                            }
                            button.disabled = !isEnabled;
                        });
                    } else { // 'select'
                        const selectEl = document.getElementById(`select-${attr.name}`);
                        if (selectEl) {
                            selectEl.value = currentSelectedValueForThisAttribute || DEFAULT_SELECT_OPTION_VALUE;
                            Array.from(selectEl.options).forEach(option => {
                                if (option.value === DEFAULT_SELECT_OPTION_VALUE) {
                                    option.disabled = false; return;
                                }
                                const isSelected = currentSelectedValueForThisAttribute === option.value;
                                let isEnabled = true;
                                if (isThisTheFirstAttributeGroup) {
                                    isEnabled = true;
                                } else {
                                    if (isSelected) isEnabled = true;
                                    else isEnabled = isOptionAvailable(attr.name, option.value, otherAttributeSelections);
                                }
                                option.disabled = !isEnabled;
                            });
                        }
                    }
                });
            }

            function updateVariationDisplay() {
                currentValidVariation = null;
                const selectedAttributeKeys = Object.keys(selectedAttributes);
                const allProductAttributeNames = product.attributes.map(attr => attr.name);
                const isSelectionComplete = allProductAttributeNames.every(name => selectedAttributeKeys.includes(name));
                let potentialExactMatch = null;

                if (isSelectionComplete) {
                    potentialExactMatch = product.variations.find(variation =>
                        Object.keys(variation.attributes).length === selectedAttributeKeys.length &&
                        Object.entries(selectedAttributes).every(([key, value]) => variation.attributes[key] === value)
                    );
                }

                productMessageEl.textContent = ''; // Limpiar mensaje por defecto
                productMessageEl.style.display = 'none';
                priceInfoEl.style.display = 'none';
                addToCartBtn.disabled = true;
                addToCartBtn.textContent = 'Agregar al Carrito';


                if (potentialExactMatch) {
                    priceInfoEl.style.display = 'block';
                    priceRegularEl.textContent = formatPrice(potentialExactMatch.price.regular);
                    priceRegularContainer.classList.remove('strikethrough');
                    if (potentialExactMatch.price.sale != null) {
                        priceSaleEl.textContent = formatPrice(potentialExactMatch.price.sale);
                        priceSaleContainer.style.display = 'inline';
                        priceRegularContainer.classList.add('strikethrough');
                    } else {
                        priceSaleContainer.style.display = 'none';
                    }
                    productImageEl.src = potentialExactMatch.image;
                    const variationDesc = getVariationAttributeText(product.attributes, potentialExactMatch.attributes);
                    productImageEl.alt = `${product.title} - ${variationDesc}`;

                    if (potentialExactMatch.stock > 0) {
                        currentValidVariation = potentialExactMatch;
                        addToCartBtn.disabled = false;
                        if (potentialExactMatch.stock <= 5) { // Umbral para "últimas unidades"
                            productMessageEl.textContent = `¡Últimas ${potentialExactMatch.stock} unidades!`;
                            productMessageEl.style.display = 'block';
                        }
                    } else {
                        productMessageEl.textContent = 'Temporalmente agotado en esta combinación.';
                        productMessageEl.style.display = 'block';
                        addToCartBtn.textContent = 'Agotado';
                    }
                } else {
                    productImageEl.src = CONFIG.defaultImage;
                    productImageEl.alt = CONFIG.defaultAltText;
                    if (selectedAttributeKeys.length > 0 && !isSelectionComplete) {
                        productMessageEl.textContent = 'Por favor, completa todas las selecciones.';
                    } else if (isSelectionComplete && !potentialExactMatch) {
                        productMessageEl.textContent = 'Esta combinación de producto no está disponible.';
                    } else {
                        productMessageEl.textContent = 'Selecciona opciones para ver disponibilidad y precio.';
                    }
                    productMessageEl.style.display = 'block';
                }
            }

            function initializeProductView() {

                renderAttributeSelectors();

                if (CONFIG.defaultVariationSku) {
                    const defaultVariation = product.variations.find(v => v.sku === CONFIG.defaultVariationSku && v.stock > 0);
                    if (defaultVariation) {
                        Object.entries(defaultVariation.attributes).forEach(([key, value]) => {
                            selectedAttributes[key] = value;
                        });
                    } else {
                        console.warn(`Variación por defecto (SKU: ${CONFIG.defaultVariationSku}) no encontrada o sin stock.`);
                        // Opcional: intentar con la primera variación con stock si la default falla
                        const firstAvailableVariation = product.variations.find(v => v.stock > 0);
                        if (firstAvailableVariation) {
                            Object.entries(firstAvailableVariation.attributes).forEach(([key, value]) => {
                                selectedAttributes[key] = value;
                            });
                            console.log(`Usando primera variación con stock como defecto: ${firstAvailableVariation.sku}`);
                        }
                    }
                }

                updateAttributeControlsUI();
                updateVariationDisplay();
            }

            initializeProductView();
        }


        renderProduct() 
    </script>
    <% } %>
        <style>
            .tools-header {
                display: none;
            }
        </style>

        <style>
            body {
                font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
                margin: 20px;
                line-height: 1.6;
                background-color: #f8f9fa;
                color: #212529;
            }

            #product-container {
                max-width: 60%;
                margin: auto;
                background-color: #fff;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }

            #selectors label,
            .attribute-group label {
                display: block;
                margin-top: 15px;
                font-weight: 600;
                margin-bottom: 8px;
                color: #495057;
            }

            #selectors select {
                padding: 10px;
                margin-top: 5px;
                width: 100%;
                box-sizing: border-box;
                border-radius: 4px;
                border: 1px solid #ced4da;
                font-size: 1rem;
            }

            #selectors select:disabled {
                background-color: #e9ecef;
                opacity: 0.7;
            }

            .attribute-group {
                margin-bottom: 20px;
            }

            .attribute-buttons-container {
                display: flex;
                flex-wrap: wrap;
                gap: 8px;
            }

            .attribute-buttons-container button {
                padding: 8px 15px;
                border: 2px solid #ced4da;
                /* Borde más grueso para visibilidad de activo/deshabilitado */
                background-color: #f8f9fa;
                cursor: pointer;
                border-radius: 4px;
                font-size: 0.95rem;
                transition: background-color 0.2s, border-color 0.2s, color 0.2s, box-shadow 0.2s;
                min-width: 40px;
                /* Para swatches pequeños */
                min-height: 40px;
                /* Para swatches pequeños */
                display: inline-flex;
                align-items: center;
                justify-content: center;
                box-sizing: border-box;
            }

            .attribute-buttons-container button.active {
                border-color: #007bff;
                box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
            }

            .attribute-buttons-container button.type-label.active {
                /* Específico para botones de texto */
                background-color: #007bff;
                color: white;
            }

            .attribute-buttons-container button:hover:not(.active):not(:disabled) {
                background-color: #e2e6ea;
                border-color: #adb5bd;
            }

            .attribute-buttons-container button:disabled {
                background-color: #e9ecef !important;
                /* Forzar para swatches */
                color: #6c757d !important;
                border-color: #ced4da !important;
                opacity: 0.5;
                cursor: not-allowed;
                box-shadow: none;
            }

            .attribute-buttons-container button.type-hexa {
                text-indent: -9999px;
                /* Ocultar texto si es un swatch de color */
                overflow: hidden;
            }

            .attribute-buttons-container button.type-image {
                text-indent: -9999px;
                background-size: cover;
                background-position: center;
                overflow: hidden;
            }


            #product-details {
                margin-top: 25px;
                padding-top: 25px;
                border-top: 1px solid #dee2e6;
            }

            #product-image {
                max-width: 100%;
                height: auto;
                display: block;
                margin: 15px 0;
                border: 1px solid #dee2e6;
                border-radius: 4px;
                aspect-ratio: 4/3;
                object-fit: cover;
            }

            #price-regular {
                font-size: 1.3em;
                font-weight: 600;
                color: #343a40;
            }

            #price-sale-container {
                color: #dc3545;
                font-weight: bold;
                margin-left: 8px;
                font-size: 1.1em;
            }

            .strikethrough {
                text-decoration: line-through;
                color: #6c757d;
                font-weight: normal;
            }

            #add-to-cart-btn {
                display: block;
                width: 100%;
                padding: 12px;
                font-size: 1.1em;
                font-weight: 500;
                background-color: #28a745;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                margin-top: 25px;
                transition: background-color 0.2s;
            }

            #add-to-cart-btn:disabled {
                background-color: #adb5bd;
                cursor: not-allowed;
            }

            #add-to-cart-btn:hover:not(:disabled) {
                background-color: #218838;
            }

            .product-message {
                color: #777;
                margin-top: 10px;
                font-size: 0.95rem;
                text-align: center;
                min-height: 1.5em;
            }
        </style>